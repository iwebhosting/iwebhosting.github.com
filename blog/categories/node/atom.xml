<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node | iWeb Hosting]]></title>
  <link href="http://iwebhosting.github.io/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://iwebhosting.github.io/"/>
  <updated>2013-06-06T23:01:56+01:00</updated>
  <id>http://iwebhosting.github.io/</id>
  <author>
    <name><![CDATA[iWeb Hosting]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Magento to WebSockets, via Redis, Node and Juggernaut]]></title>
    <link href="http://iwebhosting.github.io/blog/2012/02/24/magento-to-websockets/"/>
    <updated>2012-02-24T23:02:00+00:00</updated>
    <id>http://iwebhosting.github.io/blog/2012/02/24/magento-to-websockets</id>
    <content type="html"><![CDATA[<p>I tried to squeeze more hipster web development tech into the title, but we&rsquo;ll
have to just make do with the above.</p>

<p>As our developers are building <a href="http://www.magentocommerce.com/">Magento</a> sites, I though it would be useful
to get to know it better. We know Magento from an operations perspective; it
likes a lot of IOs and CPU, runs well with ephemeral data stored on RAM disk,
needs a tuned APC etc., but I like to understand as much of the stack that
I look after as possible.</p>

<!--more-->


<p>I&rsquo;m a recovered PHP developer, so this wasn&rsquo;t too hard. Magento&rsquo;s source is
very OO and the PEAR-style autoloader means that files are mostly in obvious
places. We&rsquo;re going to define <code>Iweb_Redis_Observer</code> &ndash; this will appear in
<code>app/code/local/Iweb/Redis/Observer.php</code>. We&rsquo;re also going to define an
<code>Iweb_Redis</code> plugin, so the configs will live in
<code>app/etc/modules/Iweb_Redis.xml</code> and <code>app/code/local/Iweb/Redis/etc/config.xml</code>.</p>

<p>When adding passive hooks into Magento (logging, for example) you can use the
<a href="http://www.magentocommerce.com/wiki/5_-_modules_and_development/0_-_module_development_in_magento/customizing_magento_using_event-observer_method">Event/Observer method documented on the Magento wiki</a> &ndash; various
parts of the core fire events without having a tight binding to what is
receiving them. Classes register their interest in events via XML files. There
are a lot of XML files in Magento.</p>

<p>File /Users/aaron/Documents/Repo/octopress/source/downloads/code/magento/Iweb_Redis.xml could not be found</p>

<p>File /Users/aaron/Documents/Repo/octopress/source/downloads/code/magento/config.xml could not be found</p>

<p>File /Users/aaron/Documents/Repo/octopress/source/downloads/code/magento/Observer.php could not be found</p>

<p>Simple, isn&rsquo;t it? We&rsquo;ll also need <a href="https://github.com/colinmollenhour/credis">Credis</a> put somewhere the autoloader can
find it. Cloning <code>git://github.com/colinmollenhour/credis.git</code> into
<code>app/code/local/Credis</code> will do it.</p>

<p>Then <a href="https://github.com/maccman/juggernaut/blob/master/README.md">install Juggernaut</a>, install Redis (<code>apt-get install redis-server</code>)
and visit <a href="http://your.server:8080/">http://your.server:8080/</a> for the basic Juggernaut console:</p>

<p><img src="http://o7.no/whqDZi" alt="Juggernaut Console" /></p>

<p>If you&rsquo;ve found this useful or have any comments, please let me know on Twitter
via <a href="http://twitter.com/insom">@insom</a>. (If you&rsquo;re looking for <a href="http://www.iweb.co.uk/">specialists in Magento</a>, I should point
you towards <a href="http://www.iwebsolutions.co.uk/">our parent company</a>).</p>
]]></content>
  </entry>
  
</feed>
